package com.codebrig.journey.proxy.browser;

import org.joor.Reflect;

/**
 * Wrapper to expose the fields of captured JCef specific KeyEvent (CefKeyEvent),
 * see <a href="https://bitbucket.org/chromiumembedded/java-cef/src/master/java/org/cef/handler/CefKeyboardHandler.java">CefKeyboardHandler</a>
 * <p>
 * Javadoc taken from https://bitbucket.org/chromiumembedded/java-cef
 *
 * @author <a href="mailto:matyas.mazzag@gmail.com">Matyas Mazzag</a>
 */
public class CefKeyEventWrapper {
    private final Reflect jcefNativeKeyEvent;
    
    
    public CefKeyEventWrapper(Object jcefNativeKeyEvent) {
        this.jcefNativeKeyEvent = Reflect.on(jcefNativeKeyEvent);
    }

    /**
     * Bit flags describing any pressed modifier keys.
     * @see org.cef.handler.CefContextMenuHandler.EventFlags for values.
     */
    public int getModifiers() {
        return jcefNativeKeyEvent.get("modifiers");
    }

    /**
     * The Windows key code for the key event. This value is used by the DOM
     * specification. Sometimes it comes directly from the event (i.e. on
     * Windows) and sometimes it's determined using a mapping function. See
     * WebCore/platform/chromium/KeyboardCodes.h for the list of values.
     */
    public int getWindowsKeyCode() {
        return jcefNativeKeyEvent.get("windows_key_code");
    }
    
    /**
     * The actual key code genenerated by the platform.
     */
    public int getNativeKeyCode() {
        return jcefNativeKeyEvent.get("native_key_code");
    }

    /**
     * Indicates whether the event is considered a "system key" event (see
     * http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
     * This value will always be false on non-Windows platforms.
     */
    public boolean isSystemKey() {
        return jcefNativeKeyEvent.get("is_system_key");
    }

    /**
     * The character generated by the keystroke.
     */
    public char getCharacter() {
        return jcefNativeKeyEvent.get("character");
    }

    /**
     * Same as character but unmodified by any concurrently-held modifiers
     * (except shift). This is useful for working out shortcut keys.
     **/
    public char getUnmodifiedCharacter() {
        return jcefNativeKeyEvent.get("unmodified_character");
    }

    /**
     * True if the focus is currently on an editable field on the page. This is
     * useful for determining if standard key events should be intercepted.
     */
    public boolean isFocusOnEditableField() {
        return jcefNativeKeyEvent.get("focus_on_editable_field");
    }
}